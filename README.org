* Run/Build/Whatever Instructions
	#+begin_src bash
# These instructions may not work on systems other than Windows
# create server key (self-signed)
openssl req -nodes -x509 -days 730 -newkey rsa:4096 -keyout server.key -out server.crt
# extra information:
	# Country Name (2 letter code) [AU]:US
	# State or Province Name (full name) [Some-State]:Arizona
	# Locality Name (eg, city) []:Glendale
	# Organization Name (eg, company) []:.
	# Organizational Unit Name (eg, section) []:Server
	# Common Name (e.g. server FQDN or YOUR name) []:localhost
	# Email Address []:djanusch2007@gmail.com

# install dependencies (run in the root project directory)
npm install express multer mongodb

# install MongoDB and run the server
# you may need to use Administrator or change the `--dbpath` argument
# the default location is `mongodb://127.0.0.1:27017/`
# install here: `https://www.mongodb.com/try/download/community`
mongod

# run server
# file shredding uses PowerShell, so that might not work on Linux.
# You can install PowerShell here: `github.com/PowerShell/PowerShell/releases`
node server.js

# current valid domains:
	# https://localhost:443/
	# https://127.0.0.1:443/
	# http://localhost:80/
	# http://127.0.0.1:80/

# right now, browsers won't trust the HTTPS connection because the key is self-signed
	#+end_src

* Things in the /private folder
	- passwords.js: exports a CommonJS API with the following structure:
		#+begin_src ts
interface PasswordAPI {
	getHash(password: string): string;
	verifyHash(password: string, dbPasswordValue: string): boolean;
}
		#+end_src
		- They don't actually use TypeScript, but these are the types it uses
	- pepper.txt: contains enough information about the pepper to reconstruct it
	- server.key: contains the HTTPS server's private key
	- /uploads: This is where file uploads go. It must be present.

* goals (descending)
	1. security
	2. ease of use (for the user)
	3. application speed

This information is outdated

* Files
	* main-database
		- some kind of database that maps a string id to a file location.
		- the file should be allowed to be in any form or have any extension
	* second-database
		- basically map from user-friendly keys to hash keys
	* index.html
		- select one of the following and make a GET request to the frontend server:
			- upload
			- download
			- delete
	* upload.html
		- upload files to the server
		- use either the FileReader JavaScript API or <form>
		- take an optional password for the file (hash before sending. use SHA3-512)
		- take in a length of the user-friendly key. Take from the following values:
			- 0-9 6 digits
			- 0-9, A-Z, 4 digits
			- 0-9 A-Z, 8 digits
		- send a POST request to the backend server
	* download.html
		- use a form or something that takes user input to download
			- if the url has `?pass=asdf&userid=123456`, put those into the form.
		- download files from the server
		- take an optional password
		- specify either user-friendly key or hash key
		- take in the key
		- send a GET request to the backend server.
	* delete.html
		- delete files from the server
		- take an optional password
		- specify either user-friendly key or hash key
		- take in the key
		- send a DELETE request to the backend server.
	* backend-server
		- handle requests from upload.html, download.html, or delete.html
		** POST request:
			- if the 
			- if the file is larger than some size, like 1GB, send http-413.
			- create a SHA3-512 hash key for the file
			- create a user-friendly key for the file
			- if there is already something with that key in the database, do the following:
				- if there is a hash collision, send http-409
				- if there is no hash collision, send http-200 and an html page
			- append the file to the main database
			- append the user-friendly key to the second database
			- send http 200 and a page with the hash key and the user-friendly key.
		** GET request:
			- if the input is a user-friendly key, check the second database
				- if it exists, follow to the main database
				- otherwise send http-404
			- if the input is a hash key, check the main database
				- if the password is wrong, send http-404 for security reasons
				- if the key exists, send http-200 with the file
				- otherwise send http-404
		** HEAD request:
			- do the same thing as for GET, but only return the headers
		** DELETE request:
			- user-friendly key:
				- if the key exists, delete it, delete the main item, and return http-200
				- otherwise return http-404
			- hash key:
				- if the key exists, delete it, delete the user-friendly key, and return http-200
				- otherwise return http-404
		** OPTIONS request:
			- return http-200 with the following:
				- GET
				- HEAD
				- POST
				- DELETE
				- OPTIONS
		** any other request:
			return http-405
	* frontend-server
		** miscellaneous
			- support both HTTP and HTTPS.
			- use OpenSSL to self-sign a 4096-bit X.509 RSA private key (for now).
			- if it is too slow, consider 3072 or 2048 bits
			- 4096-bit RSA keys are usually only for classified government things
    	** OPTIONS request:
			return http-200 with GET, and OPTIONS
		** GET request:
			- return one of the following depending on the request:
				- index.html
				- upload.html
				- download.html
				- delete.html
				- robots.txt
				- favicon.ico
		** any other request:
			return http-405
